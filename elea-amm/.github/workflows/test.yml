name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18.x'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        solidity-version: ['0.8.28']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Compile contracts
        run: npx hardhat compile
      
      - name: Run unit tests
        run: npx hardhat test test/FixedPoint96.test.js test/SphericalMath.test.js
        
      - name: Run fuzz tests
        run: npx hardhat test test/SphericalMath.fuzz.js
        timeout-minutes: 10
      
      - name: Generate gas report
        run: npx hardhat test test/GasBenchmark.test.js > gas-report.txt
        
      - name: Upload gas report
        uses: actions/upload-artifact@v3
        with:
          name: gas-report-${{ github.sha }}
          path: gas-report.txt
      
      - name: Check gas regression
        if: github.event_name == 'pull_request'
        run: |
          # Download base branch gas report
          # Compare with current gas report
          # Fail if regression > 5%
          echo "Gas regression check would run here in production"
  
  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install coverage tools
        run: npm install --save-dev solidity-coverage
      
      - name: Run coverage
        run: npx hardhat coverage
      
      - name: Check coverage thresholds
        run: |
          # Extract coverage for math libraries
          echo "Checking coverage for FixedPoint96.sol and SphericalMath.sol"
          # Fail if coverage < 95% for math libraries
          # This would be implemented with proper coverage parsing
  
  lint:
    name: Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Solhint
        run: npm install --save-dev solhint
      
      - name: Run Solhint
        run: npx solhint 'contracts/**/*.sol'
      
      - name: Run ESLint on tests
        run: npx eslint test/**/*.js || true

  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Slither
        uses: crytic/slither-action@v0.3.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          slither-args: '--exclude naming-convention,external-function,low-level-calls'

  matrix-test:
    name: Matrix Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['16.x', '18.x', '20.x']
        solidity-version: ['0.8.26', '0.8.27', '0.8.28']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Update Solidity version
        run: |
          sed -i 's/solidity: "[^"]*"/solidity: "${{ matrix.solidity-version }}"/' hardhat.config.js
      
      - name: Install dependencies
        run: npm ci
      
      - name: Compile contracts
        run: npx hardhat compile
      
      - name: Run tests
        run: npx hardhat test

  all-tests-pass:
    name: All Tests Pass
    needs: [test, coverage, lint, security, matrix-test]
    runs-on: ubuntu-latest
    steps:
      - name: All tests passed
        run: echo "All tests passed successfully!"